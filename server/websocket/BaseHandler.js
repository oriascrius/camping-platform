class BaseHandler {
  constructor(io, socket, connections) {
    this.io = io;
    this.socket = socket;
    this.connections = connections;
    this.userId = socket.userId;
    this.userType = socket.userType;
    this.moduleName = this.constructor.name; // Áç≤ÂèñÊ®°ÁµÑÂêçÁ®±
    this.setupConnectionHandlers();
  }

  setupConnectionHandlers() {
    // Áõ£ËÅΩÈÄ£Êé•ÊõøÊèõ‰∫ã‰ª∂
    this.socket.on('connection:replace', ({ oldSocketId, newSocketId }) => {
      this.handleConnectionReplacement(oldSocketId, newSocketId);
    });
  }

  async handleConnectionReplacement(oldSocketId, newSocketId) {
    try {
      // Ê∏ÖÁêÜÁï∂ÂâçËôïÁêÜÂô®ÁöÑË≥áÊ∫ê
      await this.cleanup();
      
      this.logInfo('ËôïÁêÜÂô®Ê∏ÖÁêÜÂÆåÊàê', {
        oldSocketId,
        newSocketId,
        userId: this.userId
      });
    } catch (error) {
      this.handleError(error, 'ÈÄ£Êé•ÊõøÊèõÊ∏ÖÁêÜ');
    }
  }

  // Ê∏ÖÁêÜË≥áÊ∫êÁöÑÊñπÊ≥ïÔºàÂ≠êÈ°ûÂèØË¶ÜËìãÔºâ
  async cleanup() {
    try {
      // Âü∑Ë°åÂÖ∑È´îÁöÑÊ∏ÖÁêÜÈÇèËºØ
      await this._cleanup();
      
      // ÈÄöÁü•Ê∏ÖÁêÜÂÆåÊàê
      this.socket.emit('cleanup:complete');
      
      this.logInfo('ËôïÁêÜÂô®Ê∏ÖÁêÜÂÆåÊàê', {
        socketId: this.socket.id,
        userId: this.userId
      });
    } catch (error) {
      this.logError('ËôïÁêÜÂô®Ê∏ÖÁêÜÂ§±Êïó', error);
    }
  }

  // ÂÖ∑È´îÁöÑÊ∏ÖÁêÜÈÇèËºØÔºàÁî±Â≠êÈ°ûÂØ¶ÁèæÔºâ
  async _cleanup() {
    // Âü∫Á§éÊ∏ÖÁêÜÈÇèËºØ
  }

  // Âü∫Á§éÈåØË™§ËôïÁêÜ
  handleError(error, context) {
    this.logError(context, error);
  }

  // ‰∫ã‰ª∂ÁôºÈÄÅÂåÖË£ù
  emit(event, data) {
    try {
      this.socket.emit(event, data);
    } catch (error) {
      this.handleError(error, '‰∫ã‰ª∂ÁôºÈÄÅ');
    }
  }

  // ‰∫ã‰ª∂Áõ£ËÅΩÂåÖË£ù
  on(event, handler) {
    this.socket.on(event, async (...args) => {
      try {
        await handler.apply(this, args);
      } catch (error) {
        this.handleError(error, `ËôïÁêÜ ${event} ‰∫ã‰ª∂`);
      }
    });
  }

  // Êó•Ë™åÂ∑•ÂÖ∑ÊñπÊ≥ï
  logInfo(action, data = {}) {
    console.log(`[${this.moduleName}] ${action}:`, {
      socketId: this.socket.id,
      userId: this.userId,
      userType: this.userType,
      ...data,
      timestamp: new Date().toISOString()
    });
  }

  logError(action, error, data = {}) {
    console.error(`[${this.moduleName}] ‚ùå ${action}:`, {
      socketId: this.socket.id,
      userId: this.userId,
      userType: this.userType,
      error: error.message,
      stack: error.stack,
      ...data,
      timestamp: new Date().toISOString()
    });
  }

  logWarning(action, data = {}) {
    console.warn(`[${this.moduleName}] ‚ö†Ô∏è ${action}:`, {
      socketId: this.socket.id,
      userId: this.userId,
      userType: this.userType,
      ...data,
      timestamp: new Date().toISOString()
    });
  }

  logDebug(action, data = {}) {
    if (process.env.NODE_ENV !== 'production') {
      console.debug(`[${this.moduleName}] üîç ${action}:`, {
        socketId: this.socket.id,
        userId: this.userId,
        userType: this.userType,
        ...data,
        timestamp: new Date().toISOString()
      });
    }
  }
}

module.exports = BaseHandler; 
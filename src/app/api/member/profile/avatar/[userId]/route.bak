import fs from "fs";
import path from "path";
import { IncomingForm } from "formidable";
import { getServerSession } from "next-auth/next";
import { NextResponse } from "next/server";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";

export const config = {
  api: {
    bodyParser: false,
  },
};

async function updateUserAvatar(userId, avatarPath) {
  // 在這裡實現更新用戶頭像路徑的邏輯
  // 例如，使用資料庫查詢來更新用戶資料
  console.log(`更新用戶 ${userId} 的頭像路徑為: ${avatarPath}`);
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, 500);
  });
}

export async function PATCH(req, context) {
  try {
    console.log("開始處理頭像更新請求");
    const session = await getServerSession(req, context, authOptions);
    const { userId } = context.params;

    if (!session?.user?.id) {
      console.log("未授權: Session 不存在");
      return NextResponse.json({ error: "未授權" }, { status: 401 });
    }

    if (session.user.id !== userId) {
      console.log("未授權: 用戶 ID 不匹配");
      return NextResponse.json({ error: "未授權" }, { status: 401 });
    }

    if (!userId) {
      console.log("無效的使用者 ID");
      return NextResponse.json({ error: "無效的使用者 ID" }, { status: 400 });
    }

    const form = new IncomingForm();
    form.uploadDir = path.join(process.cwd(), "uploads/avatar");
    form.keepExtensions = true;

    console.log("開始解析表單");
    const data = await new Promise((resolve, reject) => {
      form.parse(req, async (err, fields, files) => {
        if (err) {
          console.error("Form 解析錯誤:", err);
          reject(
            NextResponse.json({ error: "Form 解析錯誤" }, { status: 500 })
          );
          return;
        }
        console.log("表單解析成功:", { fields, files });
        resolve({ fields, files });
      });
    });

    if (!data.files || !data.files.avatar) {
      console.log("未收到文件");
      return NextResponse.json({ error: "未收到文件" }, { status: 400 });
    }

    const file = data.files.avatar[0];
    const filename = `${userId}_${file.originalFilename}`;
    const filePath = `/uploads/avatar/${filename}`;

    // 確保 uploads/avatar 目錄存在
    const uploadDir = path.join(process.cwd(), "uploads/avatar");
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }

    // 移动文件
    const oldPath = file.filepath;
    const newPath = path.join(uploadDir, filename);

    try {
      fs.renameSync(oldPath, newPath);
      console.log(`文件移動成功: ${oldPath} -> ${newPath}`);
    } catch (moveError) {
      console.error("文件移動失敗:", moveError);
      return NextResponse.json({ error: "文件移動失敗" }, { status: 500 });
    }

    try {
      await updateUserAvatar(userId, filePath);
      return NextResponse.json({ avatar: filePath }, { status: 200 });
    } catch (updateError) {
      console.error("更新資料庫失敗:", updateError);
      return NextResponse.json(
        { error: "更新資料庫失敗", details: updateError.message },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("發生錯誤:", error);
    return NextResponse.json(
      { error: "發生錯誤", details: error.message },
      { status: 500 }
    );
  }
}
